
import os
import asyncio
import logging
from datetime import datetime, timezone
from telethon import TelegramClient, events
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_vars = [
    'TARGET_USER_ID',
    'DEEPSEEK_API_KEY'
]

missing_vars = [var for var in required_vars if not os.getenv(var)]
if missing_vars:
    logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
    exit(1)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ API ID –∏ API HASH
API_ID = 28426067
API_HASH = 'aa1a85494ff6c9ac01ce3193de534731'
TARGET_USER_ID = int(os.getenv('6505085514'))
DEEPSEEK_API_KEY = os.getenv('sk-937024120cb941ac8b1fbf0178b7e8f2')

# DeepSeek API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEEPSEEK_API_URL = "https://api.deepseek.com/chat/completions"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient(
    'telegram_assistant_session',
    API_ID,
    API_HASH
)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤
MAX_INPUT_LENGTH = 2000
MAX_RESPONSE_TOKENS = 2000

async def get_deepseek_response(text):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    if len(text) > MAX_INPUT_LENGTH:
        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 2000 —Å–∏–º–≤–æ–ª–æ–≤."

    try:
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": text}],
            "temperature": 0.7,
            "max_tokens": MAX_RESPONSE_TOKENS,
            "top_p": 0.9,
            "frequency_penalty": 0.2,
            "presence_penalty": 0.2
        }
        
        response = requests.post(
            DEEPSEEK_API_URL,
            json=payload,
            headers=headers,
            timeout=30
        )
        
        if response.status_code != 200:
            logger.error(f"DeepSeek API error: {response.status_code} - {response.text[:200]}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API ({response.status_code})"
        
        data = response.json()
        
        if not data.get("choices") or not isinstance(data["choices"], list):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç DeepSeek: {data}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞"
        
        return data["choices"][0]["message"]["content"]
    
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API")
        return "‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É"
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ DeepSeek API: {str(e)}", exc_info=True)
        return "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"

async def send_hourly_report():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ—á–∞—Å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    logger.info("–°–ª—É–∂–±–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    
    while True:
        try:
            if not client.is_connected():
                logger.warning("–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                await asyncio.sleep(30)
                continue
            
            time_str = datetime.now(timezone.utc).strftime('%H:%M %d.%m.%Y')
            report_request = (
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã. "
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time_str}. "
                "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-5 –ø—É–Ω–∫—Ç–æ–≤ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã."
            )
            
            ai_report = await get_deepseek_response(report_request)

            if ai_report.startswith(("‚ö†Ô∏è", "‚åõ")):
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {ai_report}")
                await asyncio.sleep(300)
                continue
                
            message = f"üìä –û—Ç—á–µ—Ç –∑–∞ {time_str} (UTC):\n\n{ai_report}"
            
            while message:
                chunk = message[:4096]
                message = message[4096:]
                await client.send_message(
                    TARGET_USER_ID,
                    chunk,
                    silent=True,
                    link_preview=False
                )
            
            logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TARGET_USER_ID}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
        
        await asyncio.sleep(3600)

@client.on(events.NewMessage(incoming=True, func=lambda e: e.is_private))
async def private_message_handler(event):
    if event.sender_id != TARGET_USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.sender_id}")
        return
        
    try:
        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.sender_id}")
        await event.client.send_read_acknowledge(event.chat_id)
        
        async with event.client.action(event.chat_id, 'typing'):
            response = await asyncio.wait_for(
                get_deepseek_response(event.text),
                timeout=30
            )
        
        reply = f"ü§ñ {response}" if not response.startswith("‚ö†Ô∏è") else response
        while reply:
            chunk = reply[:4096]
            reply = reply[4096:]
            await event.reply(chunk, link_preview=False)
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {event.sender_id}")
        
    except asyncio.TimeoutError:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {event.sender_id}")
        await event.reply("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await event.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    try:
        await client.start()
        me = await client.get_me()
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} (ID: {me.id})")
        
        await client.send_message(
            TARGET_USER_ID, 
            'ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n'
            f'–í–µ—Ä—Å–∏—è: 2.0\n'
            f'–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S %Z")}'
        )
        
        asyncio.create_task(send_hourly_report())
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        try:
            await client.disconnect()
        except:
            pass

if __name__ == '__main__':
    asyncio.run(main())
